import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Helmet } from 'react-helmet';
import Lottie from 'lottie-react';
import AOS from 'aos';
import axios from 'axios'; // Import Axios
import 'aos/dist/aos.css'; // Import AOS styles

const BlogCreator = () => {
  const [blogContent, setBlogContent] = useState('');
  const [seoResult, setSeoResult] = useState(null);
  const [animationData, setAnimationData] = useState(null);

  useEffect(() => {
    // Initialize AOS
    AOS.init({
      duration: 1000, // Duration of the animation
      once: true, // Whether animation should happen only once - while scrolling down
    });

    fetch('/seo-analysis.json')
      .then((response) => response.json())
      .then((data) => setAnimationData(data))
      .catch((error) => console.error('Error loading Lottie JSON:', error));
  }, []);

  const createBlog = async () => {
    if (!blogContent) {
      setSeoResult({ message: 'Please enter blog content.', keywords: [], readability: null, wordCount: 0 });
      return;
    }

    try {
      // Make the API call
      const response = await axios.post('https://keyword-research3.onrender.com/api/gemini/create-blog', {
        prompt: blogContent, // Send the blog content as a prompt
      });

      // Set the received blog content
      const generatedBlogContent = response.data.blogContent;
      setBlogContent(generatedBlogContent); // Update the blog content state

      // SEO analysis for the generated blog content (optional)
      const words = generatedBlogContent.toLowerCase().split(/\s+/);
      const wordCount = words.length;

      const keywordDensity = {};
      words.forEach(word => {
        if (word.length > 3) {
          keywordDensity[word] = (keywordDensity[word] || 0) + 1;
        }
      });

      const sortedKeywords = Object.entries(keywordDensity)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([keyword, count]) => ` ${keyword} (${((count / wordCount) * 100).toFixed(2)}%)`);

      const sentences = generatedBlogContent.split(/[.!?]/).filter(Boolean).length;
      const syllables = words.reduce((acc, word) => acc + (word.match(/[aeiouy]{1,2}/g) || []).length, 0);
      const readability = 206.835 - (1.015 * (wordCount / sentences)) - (84.6 * (syllables / wordCount));

      setSeoResult({
        message: 'Blog Generated by AI',
        keywords: sortedKeywords,
        readability: readability.toFixed(2),
        wordCount,
      });
    } catch (error) {
      console.error('Error generating blog:', error);
      setSeoResult({ message: 'Error generating blog content.', keywords: [], readability: null, wordCount: 0 });
    }
  };

  return (
    <div style={{ width: '900px', minHeight: '100vh', padding: '0 50px' }} className="relative flex items-center justify-center overflow-hidden">
      <Helmet>
        <title>Blog Creator</title>
        <meta name="description" content="Create your blog content with AI and optimize for SEO with keyword analysis and readability scores." />
        <meta name="keywords" content="Blog Creation, AI Blog Generator, SEO Optimization, Readability Score" />
      </Helmet>

      <div className="relative w-full min-h-screen flex items-center justify-center overflow-hidden px-10">
        <div className="absolute inset-0 z-0">
          {animationData && <Lottie animationData={animationData} loop={true} className="w-full h-full" />}
        </div>

        <motion.div 
          initial={{ opacity: 0, y: -20 }} 
          animate={{ opacity: 1, y: 0 }} 
          transition={{ duration: 0.5 }}
          className="relative z-10 w-full max-w-6xl mx-4 shadow-lg p-10 rounded-lg border bg-gradient-to-r from-blue-200 to-purple-300 text-white"
          data-aos="fade-up" // Add AOS animation
        >
          <h1 className="text-2xl font-bold text-center mb-4" data-aos="fade-down">Create Your Blog</h1>
          <motion.textarea
            value={blogContent}
            onChange={(e) => setBlogContent(e.target.value)}
            placeholder="Enter a short blog idea..."
            className="w-full p-2 border rounded outline-none text-gray-900"
            rows="4"
            whileFocus={{ scale: 1.02 }}
            data-aos="fade-right" // Add AOS animation
          />

          <motion.button
            onClick={createBlog}
            className="w-full mt-4 p-3 bg-green-500 text-white font-bold rounded-lg hover:bg-green-600"
            whileTap={{ scale: 0.95 }}
            data-aos="fade-left" // Add AOS animation
          >
            Generate Blog
          </motion.button>

          {blogContent && (
            <motion.div 
              className="mt-4 p-3 border rounded shadow-md bg-white text-gray-900" 
              initial={{ opacity: 0 }} 
              animate={{ opacity: 1 }} 
              transition={{ duration: 0.3 }}
              data-aos="zoom-in" // Add AOS animation
            >
              <strong>Blog Content:</strong> <br />
              <p>{blogContent}</p>
            </motion.div>
          )}

          {seoResult && (
            <motion.div 
              className="mt-4 p-3 border rounded shadow-md bg-white text-gray-900" 
              initial={{ opacity: 0 }} 
              animate={{ opacity: 1 }} 
              transition={{ duration: 0.3 }}
              data-aos="zoom-in" // Add AOS animation
            >
              <strong>Result:</strong> {seoResult.message} <br />
              <strong>Word Count:</strong> {seoResult.wordCount} <br />
              <strong>Top Keywords:</strong>
              <ul>
                {seoResult.keywords.map((keyword, index) => (
                  <li key={index}>{keyword}</li>
                ))}
              </ul>
              <strong>Readability Score:</strong> {seoResult.readability}
            </motion.div>
          )}
        </motion.div>
      </div>
    </div>
  );
};

export default BlogCreator;
